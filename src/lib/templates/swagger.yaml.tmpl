openapi: 3.0.1
info:
  title: Neth-Express-Api-TS
  description: <h3 align="center">A REST Api written in Typescript using
    Express</h3> <p align="center">Provides JWT Bearer Token authentication
    with  access control lists<br> Protected routes will need a `jwt-token`<br>
    Full repo on [github](https://github.com/Netherium/neth-express-api-ts)<br>
    Made with ‚ù§ by [Netherium](https://github.com/Netherium)</p>
  contact:
    email: gerpis@gmail.com
  license:
    name: MIT license
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
  - url: http://localhost:4000/api
tags:
  - name: Auth
    description: Operations for authorizing
  - name: Users
  - name: Roles
  - name: ResourcePermissions
  - name: Uploads
  - name: Articles
paths:
  /auth/login:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthUser"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          $ref: "#/components/responses/HTTP_UNAUTHORIZED"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
  /auth/register:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthUser"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
  /auth/profile:
    get:
      tags:
        - Auth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    put:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthUser"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    delete:
      tags:
        - Auth
      responses:
        "204":
          $ref: "#/components/responses/HTTP_NO_CONTENT"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  /auth/init:
    get:
      tags:
        - Auth
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
  /users:
    get:
      tags:
        - Users
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    post:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  "/users/{id}":
    get:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    put:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    delete:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/HTTP_NO_CONTENT"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  /roles:
    get:
      tags:
        - Roles
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    post:
      tags:
        - Roles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  "/roles/{id}":
    get:
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    put:
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    delete:
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/HTTP_NO_CONTENT"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  /resource-permissions:
    get:
      tags:
        - ResourcePermissions
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourcePermission"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    post:
      tags:
        - ResourcePermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourcePermission"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePermission"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  "/resource-permissions/{id}":
    get:
      tags:
        - ResourcePermissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePermission"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    put:
      tags:
        - ResourcePermissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourcePermission"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePermission"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    delete:
      tags:
        - ResourcePermissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/HTTP_NO_CONTENT"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  /uploads:
    get:
      tags:
        - Uploads
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaObject"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    post:
      tags:
        - Uploads
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileUpload"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePermission"
        "422":
          $ref: "#/components/responses/HTTP_UNPROCESSABLE_ENTITY"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  "/uploads/{id}":
    get:
      tags:
        - Uploads
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaObject"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    put:
      tags:
        - Uploads
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileUpload"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaObject"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    delete:
      tags:
        - Uploads
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/HTTP_NO_CONTENT"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  /articles:
    get:
      tags:
        - Articles
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    post:
      tags:
        - Articles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
  "/articles/{id}":
    get:
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    put:
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
    delete:
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/HTTP_NO_CONTENT"
        "404":
          $ref: "#/components/responses/HTTP_NOT_FOUND"
        "500":
          $ref: "#/components/responses/HTTP_INTERNAL_SERVER_ERROR"
      security:
        - Bearer: []
components:
  responses:
    HTTP_CREATED:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/User"
              - $ref: "#/components/schemas/Role"
    HTTP_NO_CONTENT:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    HTTP_BAD_REQUEST:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    HTTP_UNAUTHORIZED:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    HTTP_FORBIDDEN:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    HTTP_NOT_FOUND:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    HTTP_UNSUPPORTED_MEDIA_TYPE:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    HTTP_UNPROCESSABLE_ENTITY:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    HTTP_INTERNAL_SERVER_ERROR:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    AuthUser:
      required:
        - email
        - name
        - password
      type: object
      properties:
        email:
          type: string
          example: admin@admin.com
        name:
          type: string
          example: JOHN DOE
        password:
          type: string
          example: qwerty
    User:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        email:
          type: string
          example: admin@admin.com
        name:
          type: string
          example: JOHN DOE
        role:
          $ref: "#/components/schemas/Role"
        isVerified:
          type: boolean
        password:
          type: string
          writeOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - email
        - name
        - role
        - password
    MediaObject:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        alternativeText:
          type: string
        caption:
          type: string
        width:
          type: number
          readOnly: true
        height:
          type: number
          readOnly: true
        hash:
          type: string
          readOnly: true
        ext:
          type: string
          readOnly: true
        mime:
          type: string
          readOnly: true
        size:
          type: number
          readOnly: true
        url:
          type: string
          readOnly: true
        path:
          type: string
          readOnly: true
        provider:
          type: string
          readOnly: true
        provider_metadata:
          type: string
          readOnly: true
        thumbnail:
          type: object
          properties:
            hash:
              type: string
              readOnly: true
            ext:
              type: string
              readOnly: true
            mime:
              type: string
              readOnly: true
            width:
              type: number
              readOnly: true
            height:
              type: number
              readOnly: true
            size:
              type: number
              readOnly: true
            url:
              type: string
              readOnly: true
            path:
              type: string
              readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string
    Role:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
          example: Public
        isAuthenticated:
          type: boolean
        description:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - isAuthenticated
    FileUpload:
      type: object
      required:
        - file
      properties:
        alternativeText:
          type: string
        caption:
          type: string
        file:
          type: string
          format: binary
    ResourcePermission:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        resourceName:
          type: string
          example: Public
        methods:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              roles:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        description:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - isAuthenticated
    Article:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        title:
          type: string
        author:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - title
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >-
        To access certain routes of API a valid JWT token must be passed in
        authorized methods in the 'Authorization' header.<br>

        Get a valid JWT token from `/auth/login`<br>

        Paste token in the following format <b>xxxxxx.yyyyyyy.zzzzzz</b> here<br>
